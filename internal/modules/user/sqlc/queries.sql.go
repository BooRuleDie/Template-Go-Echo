// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (name, email, phone, role, password)
VALUES ($1, $2, $3, $4, $5)
`

type CreateUserParams struct {
	Name     string
	Email    string
	Phone    sql.NullString
	Role     string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.Role,
		arg.Password,
	)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE users SET is_delete = TRUE, updated_at = NOW() WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserById = `-- name: GetUserById :one
SELECT id, name, email, phone, role, password, created_at, updated_at, is_delete FROM users WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Role,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDelete,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET name = $1, email = $2, phone = $3, role = $4, password = $5, updated_at = NOW() WHERE id = $6
`

type UpdateUserParams struct {
	Name     string
	Email    string
	Phone    sql.NullString
	Role     string
	Password string
	ID       int64
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.Role,
		arg.Password,
		arg.ID,
	)
	return err
}
