// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, email, phone, role, password)
VALUES ($1, $2, $3, $4, $5)
RETURNING id
`

type CreateUserParams struct {
	Name     string
	Email    string
	Phone    sql.NullString
	Role     string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.Role,
		arg.Password,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE users SET is_deleted = TRUE, updated_at = NOW() WHERE id = $1 AND is_deleted = FALSE
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserById = `-- name: GetUserById :one
SELECT 
    id, 
    name, 
    email, 
    phone, 
    role, 
    password, 
    created_at, 
    updated_at, 
    is_deleted
FROM users 
WHERE 
    id = $1 AND
    is_deleted = FALSE
`

func (q *Queries) GetUserById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Role,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET name = $1, email = $2, phone = $3, updated_at = NOW() WHERE id = $4 AND is_deleted = FALSE
`

type UpdateUserParams struct {
	Name  string
	Email string
	Phone sql.NullString
	ID    int64
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.ID,
	)
	return err
}
