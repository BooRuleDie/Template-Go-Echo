// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT 
    id, 
    name, 
    email, 
    phone, 
    role, 
    password,
    created_at, 
    updated_at
FROM users 
WHERE 
    email = $1 AND
    is_deleted = FALSE
LIMIT 1
`

type GetUserByEmailRow struct {
	ID        int64
	Name      string
	Email     string
	Phone     sql.NullString
	Role      string
	Password  string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Role,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT 
    id, 
    name, 
    email, 
    phone, 
    role, 
    password,
    created_at, 
    updated_at
FROM users 
WHERE 
    id = $1 AND
    is_deleted = FALSE
LIMIT 1
`

type GetUserByIdRow struct {
	ID        int64
	Name      string
	Email     string
	Phone     sql.NullString
	Role      string
	Password  string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) GetUserById(ctx context.Context, id int64) (GetUserByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i GetUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Role,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
